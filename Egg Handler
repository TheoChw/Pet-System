This is a resubmit it also Does NOT work on its own

-- Services and Game References
local TweenService = game:GetService("TweenService") -- Used for UI animations
local MarketplaceService = game:GetService("MarketplaceService") -- Used for handling gamepasses
local ReplicatedStorage = game:GetService("ReplicatedStorage") -- Stores shared assets across the game
local Players = game:GetService("Players") -- Manages player-related functionality
local PetsLibrary = ReplicatedStorage:WaitForChild("Pets") -- Folder containing pet-related data and models
local EggsModule = require(PetsLibrary:WaitForChild("Eggs")) -- Module that defines egg data
local RemoteEvents = ReplicatedStorage:WaitForChild("RemoteEvents") -- Remote events for client-server communication
local EggModels = workspace:WaitForChild("Eggs") -- Holds physical models of eggs in the game world

-- Table to track player cooldowns for opening eggs
local playerDebounce = {}

-- Utility function to check if a player is on cooldown for opening eggs
local function isDebounced(player)
	return playerDebounce[player.UserId] or false
end

-- Utility function to set a cooldown for a player
local function setDebounce(player, state)
	playerDebounce[player.UserId] = state
end

-- Resets a player's cooldown after a short delay
local function resetDebounce(player)
	setDebounce(player, true)
	task.delay(3.2, function() setDebounce(player, false) end)
end

-- Returns the total number of pets a player currently owns
local function getTotalPets(player)
	local petsFolder = player:FindFirstChild("Pets")
	return petsFolder and #petsFolder:GetChildren() or 0
end

-- Generates a unique pet ID for a new pet
local function generateUniquePetID(player)
	local randomID = math.random(2, 1000000)
	for _, pet in ipairs(player.Pets:GetChildren()) do
		if pet.PetID.Value == randomID then
			return generateUniquePetID(player) -- Recursively generate a new ID if a duplicate is found
		end
	end
	return randomID
end

-- Randomly selects a pet from an egg based on its rarity weight
local function choosePet(egg)
	local pets = EggsModule[egg].Pets
	local totalWeight = 0

	-- Calculate the total weight of all pets in the egg
	for _, pet in ipairs(pets) do
		totalWeight += pet.Rarity
	end

	-- Generate a random number and determine which pet corresponds to that number
	local randomChance = math.random(1, totalWeight)
	local counter = 0

	for _, pet in ipairs(pets) do
		counter += pet.Rarity
		if counter >= randomChance then
			return pet.Name
		end
	end
end

-- Creates a new pet and adds it to the player's inventory
local function givePet(player, petName)
	local petModel = PetsLibrary.Models:FindFirstChild(petName)
	if not petModel then return nil end

	local settings = petModel:FindFirstChild("Settings")
	if not settings then return nil end

	local newPet = PetsLibrary.PetFolderTemplate:Clone()
	newPet.PetID.Value = generateUniquePetID(player)
	newPet.Multiplier1.Value = settings.Multiplier1.Value
	newPet.Multiplier2.Value = settings.Multiplier2.Value
	newPet.Type.Value = settings.Type.Value
	newPet.Parent = player.Pets
	newPet.Name = petName

	return newPet
end

-- Handles opening a single egg and awarding a pet
local function openSingleEgg(player, egg)
	local petName = choosePet(egg)
	if not petName then return "Error", "No pet selected" end

	local currency = EggsModule[egg].Currency
	local cost = EggsModule[egg].Cost
	local stat = player.leaderstats:FindFirstChild(currency)

	if not stat or stat.Value < cost then
		return "Error", "Insufficient currency"
	end

	-- Deduct the currency and apply cooldown
	stat.Value -= cost
	resetDebounce(player)

	-- Attempt to give the pet and return the result
	return givePet(player, petName) and petName or "Error", "Failed to give pet"
end

-- Handles opening three eggs at once if the player has the required gamepass
local function openTripleEgg(player, egg)
	local currency = EggsModule[egg].Currency
	local cost = EggsModule[egg].Cost * 3
	local stat = player.leaderstats:FindFirstChild(currency)

	if not stat or stat.Value < cost then
		return "Error", "Insufficient currency"
	end

	-- Deduct the cost for three eggs and apply cooldown
	stat.Value -= cost
	resetDebounce(player)

	local petsChosen = {}
	for _ = 1, 3 do
		local petName = choosePet(egg)
		if petName then
			table.insert(petsChosen, petName)
			givePet(player, petName)
		end
	end

	return petsChosen
end

-- Main function that handles the egg-opening process based on the player's selection
local function unboxEgg(player, egg, eggType)
	if not EggsModule[egg] then return "Error", "Invalid egg" end

	local model = EggModels:FindFirstChild(egg)
	if not model then return "Error", "Egg model not found" end

	local character = player.Character
	local rootPart = character and character:FindFirstChild("HumanoidRootPart")
	if not rootPart then return "Error", "Character not found" end

	-- Ensure the player is close enough to the egg model
	local distance = (rootPart.Position - model.UIanchor.Position).Magnitude
	if distance > 10 then return "Error", "Too far away" end

	-- Prevent the player from opening eggs too frequently
	if isDebounced(player) then return "Error", "Cooldown active" end

	local currency = EggsModule[egg].Currency
	local cost = EggsModule[egg].Cost
	local maxStorage = player.Data.MaxStorage.Value
	local stat = player.leaderstats:FindFirstChild(currency)

	if not stat then return "Error", "Currency not found" end

	if eggType == "Single" then
		if stat.Value < cost then return "Error", "Insufficient currency" end
		if getTotalPets(player) >= maxStorage then return "Error", "Not enough inventory space" end
		return openSingleEgg(player, egg)
	elseif eggType == "Triple" then
		if not player.Data.TripleEggOwned.Value then return "Error", "Triple egg opening requires a gamepass" end
		return openTripleEgg(player, egg)
	end
end

-- Connects the unboxEgg function to a remote event so the client can request it
RemoteEvents.EggOpened.OnServerInvoke = unboxEgg
